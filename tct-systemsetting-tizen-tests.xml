<?xml version="1.0"?>
<test_definition>
    <suite launcher="xwalk" name="00-common/E0-crosswalk">
        <set name="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests">
            <testcase id="00-E0-01-0R-01-SystemSettingManager_getProperty_exist" name="01-SystemSettingManager_getProperty_exist" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if exists of getProperty - Description: Check if exists of getProperty">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if exists of getProperty - Description: Check if exists of getProperty]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_getProperty_exist.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-02-SystemSettingManager_setProperty_exist" name="02-SystemSettingManager_setProperty_exist" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if exists of setProperty - Description: Check if exists of setProperty">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if exists of setProperty - Description: Check if exists of setProperty]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_setProperty_exist.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-03-SystemSettingManager_extend" name="03-SystemSettingManager_extend" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if SystemSettingManager is extendable - Description: Check if SystemSettingManager is extendable">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if SystemSettingManager is extendable - Description: Check if SystemSettingManager is extendable]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_extend.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-04-SystemSettingManager_getProperty_HOME_SCREEN" name="04-SystemSettingManager_getProperty_HOME_SCREEN" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if getProperty works for HOME_SCREEN - Description: Check if getProperty works for HOME_SCREEN">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if getProperty works for HOME_SCREEN - Description: Check if getProperty works for HOME_SCREEN]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_getProperty_HOME_SCREEN.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-05-SystemSettingManager_getProperty_INCOMING_CALL" name="05-SystemSettingManager_getProperty_INCOMING_CALL" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if getProperty works for INCOMING_CALL - Description: Check if getProperty works for INCOMING_CALL">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if getProperty works for INCOMING_CALL - Description: Check if getProperty works for INCOMING_CALL]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_getProperty_INCOMING_CALL.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-06-SystemSettingManager_getProperty_type_TypeMismatch" name="06-SystemSettingManager_getProperty_type_TypeMismatch" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if getProperty throws exception when type is incorrect - Description: Check if getProperty throws exception when type is incorrect">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if getProperty throws exception when type is incorrect - Description: Check if getProperty throws exception when type is incorrect]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_getProperty_type_TypeMismatch.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-07-SystemSettingManager_getProperty_LOCK_SCREEN" name="07-SystemSettingManager_getProperty_LOCK_SCREEN" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if getProperty works for LOCK_SCREEN - Description: Check if getProperty works for LOCK_SCREEN">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if getProperty works for LOCK_SCREEN - Description: Check if getProperty works for LOCK_SCREEN]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_getProperty_LOCK_SCREEN.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-08-SystemSettingManager_getProperty_no_errorCallback" name="08-SystemSettingManager_getProperty_no_errorCallback" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if getProperty works without error callback - Description: Check if getProperty works without error callback">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if getProperty works without error callback - Description: Check if getProperty works without error callback]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_getProperty_no_errorCallback.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-09-SystemSettingManager_setProperty_HOME_SCREEN" name="09-SystemSettingManager_setProperty_HOME_SCREEN" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if setProperty works for HOME_SCREEN - Description: Check if setProperty works for HOME_SCREEN">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if setProperty works for HOME_SCREEN - Description: Check if setProperty works for HOME_SCREEN]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_setProperty_HOME_SCREEN.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-0A-SystemSettingManager_setProperty_INCOMING_CALL" name="0A-SystemSettingManager_setProperty_INCOMING_CALL" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if setProperty works for INCOMING_CALL - Description: Check if setProperty works for INCOMING_CALL">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if setProperty works for INCOMING_CALL - Description: Check if setProperty works for INCOMING_CALL]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_setProperty_INCOMING_CALL.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-0B-SystemSettingManager_setProperty_errorCallback_invalid_cb" name="0B-SystemSettingManager_setProperty_errorCallback_invalid_cb" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if setProperty throws exception when error callback is invalid - Description: Check if setProperty throws exception when error callback is invalid">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if setProperty throws exception when error callback is invalid - Description: Check if setProperty throws exception when error callback is invalid]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_setProperty_errorCallback_invalid_cb.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-0C-SystemSettingManager_setProperty_successCallback_invalid_cb" name="0C-SystemSettingManager_setProperty_successCallback_invalid_cb" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if setProperty throws exception when success callback is invalid - Description: Check if setProperty throws exception when success callback is invalid">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if setProperty throws exception when success callback is invalid - Description: Check if setProperty throws exception when success callback is invalid]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_setProperty_successCallback_invalid_cb.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-0D-SystemSettingManager_setProperty_type_TypeMismatch" name="0D-SystemSettingManager_setProperty_type_TypeMismatch" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if setProperty throws exception when type is incorrect - Description: Check if setProperty throws exception when type is incorrect">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if setProperty throws exception when type is incorrect - Description: Check if setProperty throws exception when type is incorrect]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_setProperty_type_TypeMismatch.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-0E-SystemSettingManager_setProperty_LOCK_SCREEN" name="0E-SystemSettingManager_setProperty_LOCK_SCREEN" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if setProperty works for LOCK_SCREEN - Description: Check if setProperty works for LOCK_SCREEN">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if setProperty works for LOCK_SCREEN - Description: Check if setProperty works for LOCK_SCREEN]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_setProperty_LOCK_SCREEN.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-0F-SystemSettingManager_setProperty_no_errorCallback" name="0F-SystemSettingManager_setProperty_no_errorCallback" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if setProperty works for home_screen without error_callback - Description: Check if setProperty works for home_screen without error_callback">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if setProperty works for home_screen without error_callback - Description: Check if setProperty works for home_screen without error_callback]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_setProperty_no_errorCallback.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-0G-SystemSettingManager_setProperty_NOTIFICATION_EMAIL" name="0G-SystemSettingManager_setProperty_NOTIFICATION_EMAIL" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if setProperty works for NOTIFICATION_EMAIL - Description: Check if setProperty works for NOTIFICATION_EMAIL">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if setProperty works for NOTIFICATION_EMAIL - Description: Check if setProperty works for NOTIFICATION_EMAIL]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_setProperty_NOTIFICATION_EMAIL.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-0H-SystemSettingManager_notexist" name="0H-SystemSettingManager_notexist" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if SystemSettingManage doesn't exist - Description: Check if SystemSettingManage doesn't exist">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if SystemSettingManage doesn't exist - Description: Check if SystemSettingManage doesn't exist]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_notexist.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-0I-SystemSettingObject_notexist" name="0I-SystemSettingObject_notexist" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if SystemSettingObject is undefined - Description: Check if SystemSettingObject is undefined">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if SystemSettingObject is undefined - Description: Check if SystemSettingObject is undefined]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingObject_notexist.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-0J-SystemSettingSuccessCallback_notexist" name="0J-SystemSettingSuccessCallback_notexist" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if SystemSettingSuccessCallback doesn't exist - Description: Check if SystemSettingSuccessCallback doesn't exist">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if SystemSettingSuccessCallback doesn't exist - Description: Check if SystemSettingSuccessCallback doesn't exist]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingSuccessCallback_notexist.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-0K-SystemSettingManager_getProperty_NOTIFICATION_EMAIL" name="0K-SystemSettingManager_getProperty_NOTIFICATION_EMAIL" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if getProperty works for NOTIFICATION_EMAIL - Description: Check if getProperty works for NOTIFICATION_EMAIL">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if getProperty works for NOTIFICATION_EMAIL - Description: Check if getProperty works for NOTIFICATION_EMAIL]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_getProperty_NOTIFICATION_EMAIL.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-0L-SystemSettingManager_in_tizen" name="0L-SystemSettingManager_in_tizen" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if tizen.systemsetting can be overwritten - Description: Check if tizen.systemsetting can be overwritten">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if tizen.systemsetting can be overwritten - Description: Check if tizen.systemsetting can be overwritten]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_in_tizen.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-0M-SystemSettingSuccessCallback_onsuccess" name="0M-SystemSettingSuccessCallback_onsuccess" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if SystemSettingSuccessCallback works - Description: Check if SystemSettingSuccessCallback works">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if SystemSettingSuccessCallback works - Description: Check if SystemSettingSuccessCallback works]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingSuccessCallback_onsuccess.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-0N-SystemSettingManager_setProperty_successCallback_TypeMismatch" name="0N-SystemSettingManager_setProperty_successCallback_TypeMismatch" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if setProperty throws exception when successCallback is incorrect - Description: Check if setProperty throws exception when successCallback is incorrect">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if setProperty throws exception when successCallback is incorrect - Description: Check if setProperty throws exception when successCallback is incorrect]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_setProperty_successCallback_TypeMismatch.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-0O-SystemSettingManager_setProperty_missarg" name="0O-SystemSettingManager_setProperty_missarg" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if setProperty throws exception when non-optional argument is missing - Description: Check if setProperty throws exception when non-optional argument is missing">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if setProperty throws exception when non-optional argument is missing - Description: Check if setProperty throws exception when non-optional argument is missing]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_setProperty_missarg.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-0P-SystemSettingManager_setProperty_errorCallback_TypeMismatch" name="0P-SystemSettingManager_setProperty_errorCallback_TypeMismatch" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if setProperty throws exception when errorCallback is incorrect - Description: Check if setProperty throws exception when errorCallback is incorrect">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if setProperty throws exception when errorCallback is incorrect - Description: Check if setProperty throws exception when errorCallback is incorrect]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_setProperty_errorCallback_TypeMismatch.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-0Q-SystemSettingManager_getProperty_missarg" name="0Q-SystemSettingManager_getProperty_missarg" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if getProperty throws exception when non-optional argument is missing - Description: Check if getProperty throws exception when non-optional argument is missing">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if getProperty throws exception when non-optional argument is missing - Description: Check if getProperty throws exception when non-optional argument is missing]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_getProperty_missarg.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-0R-SystemSettingManager_getProperty_successCallback_TypeMismatch" name="0R-SystemSettingManager_getProperty_successCallback_TypeMismatch" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if getProperty throws exception when successCallback is incorrect - Description: Check if getProperty throws exception when successCallback is incorrect">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if getProperty throws exception when successCallback is incorrect - Description: Check if getProperty throws exception when successCallback is incorrect]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_getProperty_successCallback_TypeMismatch.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-0S-SystemSettingManager_getProperty_errorCallback_TypeMismatch" name="0S-SystemSettingManager_getProperty_errorCallback_TypeMismatch" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if getProperty throws exception when errorCallback is incorrect - Description: Check if getProperty throws exception when errorCallback is incorrect">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if getProperty throws exception when errorCallback is incorrect - Description: Check if getProperty throws exception when errorCallback is incorrect]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_getProperty_errorCallback_TypeMismatch.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-0T-SystemSettingManager_getProperty_errorCallback_invalid_cb" name="0T-SystemSettingManager_getProperty_errorCallback_invalid_cb" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if getProperty throws exception when error callback is invalid - Description: Check if getProperty throws exception when error callback is invalid">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if getProperty throws exception when error callback is invalid - Description: Check if getProperty throws exception when error callback is invalid]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_getProperty_errorCallback_invalid_cb.html</test_script_entry>
                </description>
            </testcase>
            <testcase id="00-E0-01-0R-0U-SystemSettingManager_getProperty_successCallback_invalid_cb" name="0U-SystemSettingManager_getProperty_successCallback_invalid_cb" priority="P0" execution_type="auto" component="common/crosswalk/deviceapi/tct-systemsetting-tizen-tests" status="designed" type="compliance" purpose="Objective: Check if getProperty throws exception when success callback is invalid - Description: Check if getProperty throws exception when success callback is invalid">
                <description>
                    <pre_condition>
                    <![CDATA[Objective: Check if getProperty throws exception when success callback is invalid - Description: Check if getProperty throws exception when success callback is invalid]]></pre_condition>
                    <notes>
                    <![CDATA[]]></notes>
                    <test_script_entry>/opt/tct-systemsetting-tizen-tests/systemsetting/SystemSettingManager_getProperty_successCallback_invalid_cb.html</test_script_entry>
                </description>
            </testcase>
        </set>
    </suite>
</test_definition>